Luke Engle, Blaine Mason
Computer Science II (COSC 220)

***********************************************************************************
Problem-solving approaches:
  The first class implemented was SUList since it is the base for SUStackList and 
  SUQueueList. Once SUList was 'perfected' and proved worthy, the Stack and Queue 
  implementations were easy since they were calls to the SUList operations. Having  
  the Linked List doublely made overloading the operator[] easy, and also allowed 
  more compatability as a library. After SUList was finished, the Arr methods were 
  created for both Stack and Queue, and this was with arrays so there wasn't much 
  confusion. Problems were present during the overload<< for all classes, since the 
  entire thing is templated, the friend function can only be defined "in-line". 
  Having the book helped for Binary Search Tree since it pretty much gave us all 
  the code, but the testing was done by us. Having two people helped simple issues 
  that would be widely over-analysed. We were both able to spot simple issues in our 
  code and work together to attempt to not leak any memeory, since throughout the 
  semester that has definitely been an issue for the both of us.
************************************************************************************

************************************************************************************
Known "Features":
  When performing a copy constructor for QueueList or StackList, in the method body
  the SUList =overload is invoked on *this {*this = rhs;} performing a deep copy. This 
  solution was created because we couldn't find a way to invoke the copy constructor
  from SUList so we invoked the =overload.
************************************************************************************


Project 3

Files:
  payroll.cpp~(payroll.h)
  SULibTest.cpp
  SUList.cpp()~(SUList.h)
  SUQueue.cpp~(SUQueue.h)
  SUStack.cpp~(SUStack.h)
  SUTree.cpp~(SUTree.h)
  Makefile~(Enter 'make' then './run')

=============
payroll.cpp
=============
A basic payroll class with data members for name, pay rate, and number of hours
worked. Objects of this class may be used with any of the included list types.

=============
SULibTest.cpp
=============
Driver file. It contains the main function which displays all tests for the
following list files.

=============
SUList.cpp
=============
A templated doubly-linked list. Items can be appended to or retrieved from its
front or back. It also serves as the basis for class SUQueueList.

=============
SUQueue.cpp
=============
Contains two templated classes, SUQueueArr and SUQueueList. The former contains
an array data member to which items may only be appended to the front or
retrieved from the back (follows FIFO principle). The latter contains an SUList
object which is restricted to work as a queue.

=============
SUStack.cpp
=============
Contains two templated classes, SUStackArr and SUStackList. The former contains
an array data member which follows the LIFO principle, and the latter contains
a list data member that is restricted to work as a stack.

=============
SUTree.cpp
=============
Templated binary search tree with functions to insert, delete, and search
pre-order, in-order, and post-order.



Bonus features implemented:
  Overloaded output stream operators for all classes
  Overloaded [] operator for SUList
  Method to sort the SUList by using the comparison operator for DataType
  Re-implementation of Project 1
  Re-implementation of Project 2
  Binary search tree